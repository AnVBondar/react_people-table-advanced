{"version":3,"sources":["components/Navbar.tsx","App.tsx","api.ts","types/Sex.ts","store/PeopleContext.tsx","components/Homepage.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/Person.tsx","components/PeopleTable.tsx","components/PeoplePage.tsx","components/PageNotFound.tsx","Root.tsx","index.tsx"],"names":["getNavLinkClass","isActive","cn","Navbar","useSearchParams","searchParams","className","role","to","pathname","search","toString","App","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","Sex","PeopleContext","React","createContext","filteredPeople","errorMessage","isLoading","setPeopleList","isPeopleEmpty","PeopleProvider","children","useState","peopleList","setErrorMessage","setIsLoading","setIsPeopleEmpty","useLocation","gender","get","query","toLocaleLowerCase","centuries","getAll","useEffect","people","length","peopleWithParents","map","person","mother","find","p","motherName","name","father","fatherName","value","updatedState","filter","sex","toLowerCase","includes","personBorn","Math","ceil","born","getFilteredPeople","Provider","HomePage","CENTURIES","PeopleFilters","memo","setSearchParams","getPeopleByGender","params","URLSearchParams","set","delete","getPeopleByCenturies","century","newCenturies","cent","forEach","year","append","type","placeholder","onChange","event","searchValue","currentTarget","has","resetAllFilters","Loader","PersonCard","slug","useParams","died","PeopleTable","useContext","sortAlphabet","sortDesc","arr","alphabet","desc","newPeople","sort","pers1","pers2","localeCompare","reverse","getSortedList","getSortedPeople","PeoplePage","PageNotFound","Root","path","element","index","createRoot","document","getElementById","render"],"mappings":"yQAGMA,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAyCC,IAC/D,cAAe,CACb,8BAA+BD,GAFX,EAMXE,EAAS,WACpB,MAAuBC,cAAhBC,EAAP,oBAEA,OACE,qBACE,UAAQ,MACRC,UAAU,iCACVC,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKD,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CACEE,GAAG,IACHF,UAAWN,EAFb,kBAOA,cAAC,IAAD,CACEQ,GAAI,CACFC,SAAU,UACVC,OAAQL,EAAaM,YAEvBL,UAAWN,EALb,0BAaT,ECrCYY,G,MAAM,WACjB,OACE,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IAEA,qBAAKN,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,UAKT,G,6CCbKO,EAAU,oEAEhB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,GAC3B,CAEM,SAAeI,IAAtB,+B,sDAAO,iHAEEL,EAAK,KACTM,MAAK,kBAAMC,MAAMR,EAAZ,IACLO,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,KAJX,4C,sBCTA,IAAMC,EACN,MADMA,EAEL,OAFKA,EAGH,SCWGC,EAAgBC,IAAMC,cAAiC,CAClEC,eAAgB,GAChBC,aAAc,GACdC,WAAW,EACXC,cAAe,WAAQ,EACvBC,eAAe,IAOJC,EAAkC,SAAC,GAAkB,IAAD,EAAfC,EAAe,EAAfA,SAChD,EAAoCC,mBAAmB,IAAvD,mBAAOC,EAAP,KAAmBL,EAAnB,KACA,EAAwCI,mBAAiB,IAAzD,mBAAON,EAAP,KAAqBQ,EAArB,KACA,EAAkCF,oBAAkB,GAApD,mBAAOL,EAAP,KAAkBQ,EAAlB,KACA,EAA0CH,oBAAkB,GAA5D,mBAAOH,EAAP,KAAsBO,EAAtB,KACQ9B,EAAa+B,cAAb/B,SACR,EAAuBL,cAAhBC,EAAP,oBACMoC,EAASpC,EAAaqC,IAAI,QAAUlB,EACpCmB,GAAQ,UAAAtC,EAAaqC,IAAI,gBAAjB,eAA2BE,sBAAuB,GAC1DC,EAAYxC,EAAayC,OAAO,cAAgB,GAEtDC,qBAAU,WACS,YAAbtC,GACF,gCAAC,uGACC6B,GAAa,GADd,kBAGwBnB,IAHxB,WAGS6B,EAHT,QAKeC,OALf,uBAMKX,GAAa,GACbC,GAAiB,GAPtB,0BAYSW,EAAoBF,EAAOG,KAAI,SAAAC,GAAM,kCACtCA,GADsC,IAEzCC,OAAQL,EACLM,MAAK,SAAAC,GAAC,OAAIH,EAAOI,aAAeD,EAAEE,IAA5B,KAAqC,KAC9CC,OAAQV,EACLM,MAAK,SAAAC,GAAC,OAAIH,EAAOO,aAAeJ,EAAEE,IAA5B,KAAqC,MALL,IAQ3C1B,EAAcmB,GApBjB,kDAsBGb,EAAgB,wBAtBnB,yBAwBGC,GAAa,GAxBhB,4EAAD,EA4BH,GAAE,CAAC7B,IAEJ,IAqCMmD,EAAQ,CACZhC,eAtCwB,WACxB,IAAIiC,EAAyB,GAE7B,OAAQpB,GACN,IAAK,IACHoB,EAAezB,EAAW0B,QAAO,SAAAV,GAAM,MAAmB,MAAfA,EAAOW,GAAX,IACvC,MAEF,IAAK,IACHF,EAAezB,EAAW0B,QAAO,SAAAV,GAAM,MAAmB,MAAfA,EAAOW,GAAX,IACvC,MAEF,QACEF,EAAY,YAAOzB,GAmBvB,OAhBIO,IACFkB,EAAeA,EACZC,QAAO,SAAAV,GAAM,eAAIA,EAAOK,KAAKO,cAAcC,SAAStB,KAAnC,UACfS,EAAOI,kBADQ,aACf,EAAmBQ,cAAcC,SAAStB,MAD3B,UAEfS,EAAOO,kBAFQ,aAEf,EAAmBK,cAAcC,SAAStB,GAF/B,KAKdE,EAAUI,SACZY,EAAeA,EACZC,QAAO,SAAAV,GACN,IAAMc,EAAaC,KAAKC,KAAKhB,EAAOiB,KAAO,KAAK1D,WAEhD,OAAOkC,EAAUoB,SAASC,EAC3B,KAGEL,CACR,CAEsBS,GAIrBzC,eACAC,YACAC,gBACAC,iBAGF,OACE,cAACP,EAAc8C,SAAf,CAAwBX,MAAOA,EAA/B,SACG1B,GAGN,ECvHYsC,EAAW,WACtB,OACE,oBAAIlE,UAAU,QAAd,sBAEH,ECEKmE,EAAsB,CAAC,GAAI,GAAI,GAAI,GAAI,IAEhCC,EAAgBhD,IAAMiD,MAAK,WACtC,MAAwCvE,cAAxC,mBAAOC,EAAP,KAAqBuE,EAArB,KACMnC,EAASpC,EAAaqC,IAAI,QAAUlB,EACpCmB,EAAQtC,EAAaqC,IAAI,UAAY,GACrCG,EAAYxC,EAAayC,OAAO,cAAgB,GAEhD+B,EAAoB,SAACd,GACzB,IAAMe,EAAS,IAAIC,gBAAgB1E,GAEnC,OAAQ0D,GACN,KAAKvC,EAGH,OAFAsD,EAAOE,IAAI,MAAO,KAEXF,EAAOnE,WAGhB,KAAKa,EAGH,OAFAsD,EAAOE,IAAI,MAAO,KAEXF,EAAOnE,WAEhB,QAGE,OAFAmE,EAAOG,OAAO,OAEPH,EAAOnE,WAEnB,EAiBKuE,EAAuB,SAACC,GAC5B,IAAML,EAAS,IAAIC,gBAAgB1E,GAEnC,IAAK8E,EAGH,OAFAL,EAAOG,OAAO,aAEPH,EAAOnE,WAGhB,IAAMyE,EAAevC,EAAUoB,SAASkB,GACpCtC,EAAUiB,QAAO,SAAAuB,GAAI,OAAIA,IAASF,CAAb,IADJ,sBAEbtC,GAFa,CAEFsC,IAOnB,OALAL,EAAOG,OAAO,aACdG,EAAaE,SAAQ,SAAAC,GACnBT,EAAOU,OAAO,YAAaD,EAC5B,IAEMT,EAAOnE,UACf,EAYD,OACE,sBAAKL,UAAU,QAAf,UACE,mBAAGA,UAAU,gBAAb,qBAEA,oBAAGA,UAAU,aAAa,UAAQ,YAAlC,UACE,cAAC,IAAD,CACEE,GAAI,CAAEE,OAAQmE,EAAkBrD,IAChClB,UAAWJ,IAAG,CACZ,YAAauC,IAAWjB,IAH5B,iBAQA,cAAC,IAAD,CACEhB,GAAI,CAAEE,OAAQmE,EAAkBrD,IAChClB,UAAWJ,IAAG,CACZ,YAAwB,MAAXuC,IAHjB,kBAQA,cAAC,IAAD,CACEjC,GAAI,CAAEE,OAAQmE,EAAkBrD,IAChClB,UAAWJ,IAAG,CACZ,YAAwB,MAAXuC,IAHjB,uBAUF,qBAAKnC,UAAU,cAAf,SACE,oBAAGA,UAAU,yBAAb,UACE,uBACE,UAAQ,aACRmF,KAAK,SACLnF,UAAU,QACVoF,YAAY,SACZ9B,MAAOjB,EACPgD,SArFgB,SAACC,GACzB,IAAMd,EAAS,IAAIC,gBAAgB1E,GAC7BwF,EAAcD,EAAME,cAAclC,MAExC,GAAIkB,EAAOiB,IAAI,WAAaF,EAI1B,OAHAf,EAAOG,OAAO,cACdL,EAAgBE,GAKlBA,EAAOE,IAAI,QAASa,GACpBjB,EAAgBE,EACjB,IA2EO,sBAAMxE,UAAU,eAAhB,SACE,mBAAGA,UAAU,gBAAgB,cAAY,gBAK/C,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,iCAAiC,UAAQ,gBAAxD,UACE,qBAAKA,UAAU,aAAf,SACGmE,EAAUtB,KAAI,SAAAgC,GAAO,OACpB,cAAC,IAAD,CAEE,UAAQ,UACR7E,UAAWJ,IAAG,cAAe,CAC3B,UAAW2C,EAAUoB,SAASkB,EAAQxE,cAExCH,GAAI,CAAEE,OAAQwE,EAAqBC,EAAQxE,aAN7C,SAQGwE,GAPIA,EAFa,MAcxB,qBAAK7E,UAAU,mBAAf,SACE,cAAC,IAAD,CACE,UAAQ,aACRA,UAAWJ,IAAG,gCAAiC,CAC7C,cAAe2C,EAAUI,SAE3BzC,GAAI,CAAEE,OAAQwE,KALhB,wBAaN,qBAAK5E,UAAU,cAAf,SACE,cAAC,IAAD,CACEA,UAAU,0CACVE,GAAI,CAAEE,OA5FU,WACtB,IAAMoE,EAAS,IAAIC,gBAAgB1E,GAMnC,OAJAyE,EAAOG,OAAO,aACdH,EAAOG,OAAO,OACdH,EAAOG,OAAO,SAEPH,EAAOnE,UACf,CAoFqBqF,IAFhB,mCASP,ICzKYC,G,MAAS,kBACpB,qBAAK3F,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,GCOT4F,EAA8B,SAAC,GAAgB,IAAd9C,EAAa,EAAbA,OACpCC,EAAmBD,EAAnBC,OAAQK,EAAWN,EAAXM,OACRyC,EAASC,cAATD,KACR,EAAuB/F,cAAhBC,EAAP,oBAEA,OACE,qBACE,UAAQ,SACRC,UAAWJ,IAAG,CACZ,yBAA0BiG,IAAS/C,EAAO+C,OAH9C,UAME,6BACE,cAAC,IAAD,CACE7F,UAAWJ,IAAG,CACZ,kBAAkC,MAAfkD,EAAOW,MAE5BvD,GAAI,CACFC,SAAS,WAAD,OAAa2C,EAAO+C,MAC5BzF,OAAQL,EAAaM,YANzB,SASGyC,EAAOK,SAIZ,6BAAKL,EAAOW,MACZ,6BAAKX,EAAOiB,OACZ,6BAAKjB,EAAOiD,OACXhD,EACC,6BACE,cAAC,IAAD,CACE/C,UAAU,kBACVE,GAAI,CACFC,SAAS,WAAD,OAAa4C,EAAO8C,MAC5BzF,OAAQL,EAAaM,YAJzB,SAOGyC,EAAOI,eAIZ,6BAAKJ,EAAOI,YAAc,MAG3BE,EACC,6BACE,cAAC,IAAD,CACElD,GAAI,CACFC,SAAS,WAAD,OAAaiD,EAAOyC,MAC5BzF,OAAQL,EAAaM,YAHzB,SAMGyC,EAAOO,eAIZ,6BAAKP,EAAOO,YAAc,QAIjC,ECjCM,IAAM2C,EAAc,WACzB,IAAQ1E,EAAmB2E,qBAAW9E,GAA9BG,eACR,EAAuBxB,cAAhBC,EAAP,oBACMmG,EAAenG,EAAaqC,IAAI,QAChC+D,EAAWpG,EAAaqC,IAAI,SAE5BgE,EApCR,SACE1D,EACA2D,EACAC,GAEA,IAAMC,EAAS,YAAO7D,GAElB2D,GAaFE,EAAUC,MAZc,SAACC,EAAeC,GACtC,MAAiB,SAAbL,GAAoC,QAAbA,EAClBI,EAAMJ,GAAUM,cAAcD,EAAML,IAG5B,SAAbA,GAAoC,SAAbA,EAClBI,EAAMJ,GAAYK,EAAML,GAG1B,CACR,IASH,OAJIC,GACFC,EAAUK,UAGLL,CACR,CAQaM,CAAcvF,EAAgB4E,EAAcC,GAElDW,EAAkB,SAACN,GACvB,IAAMhC,EAAS,IAAIC,gBAAgB1E,GAenC,OAbImG,GAAgBA,IAAiBM,GAG1BN,IAAiBM,GAAQL,GAFlC3B,EAAOG,OAAO,QACdH,EAAOG,OAAO,WAKdH,EAAOE,IAAI,OAAQ8B,GACfN,IAAiBM,GAASL,GAC5B3B,EAAOE,IAAI,QAAS,SAIjBF,EAAOnE,UACf,EAED,OACE,wBACE,UAAQ,cACRL,UAAU,uDAFZ,UAIE,gCACE,+BACE,6BACE,uBAAMA,UAAU,8BAAhB,iBAEE,cAAC,IAAD,CAAME,GAAI,CAAEE,OAAQ0G,EAAgB,SAApC,SACE,sBAAM9G,UAAU,OAAhB,SACE,mBAAGA,UAAWJ,IAAG,cAAe,CAC9B,aAA+B,SAAjBsG,IAA4BC,EAC1C,eAAiC,SAAjBD,GAA2BC,eAQrD,6BACE,uBAAMnG,UAAU,8BAAhB,gBAEE,cAAC,IAAD,CAAME,GAAI,CAAEE,OAAQ0G,EAAgB,QAApC,SACE,sBAAM9G,UAAU,OAAhB,SACE,mBAAGA,UAAWJ,IAAG,cAAe,CAC9B,aAA+B,QAAjBsG,IAA2BC,EACzC,eAAiC,QAAjBD,GAA0BC,eAQpD,6BACE,uBAAMnG,UAAU,8BAAhB,iBAEE,cAAC,IAAD,CAAME,GAAI,CAAEE,OAAQ0G,EAAgB,SAApC,SACE,sBAAM9G,UAAU,OAAhB,SACE,mBAAGA,UAAWJ,IAAG,cAAe,CAC9B,aAA+B,SAAjBsG,IAA4BC,EAC1C,eAAiC,SAAjBD,GAA2BC,eAQrD,6BACE,uBAAMnG,UAAU,8BAAhB,iBAEE,cAAC,IAAD,CAAME,GAAI,CAAEE,OAAQ0G,EAAgB,SAApC,SACE,sBAAM9G,UAAU,OAAhB,SACE,mBAAGA,UAAWJ,IAAG,cAAe,CAC9B,aAA+B,SAAjBsG,IAA4BC,EAC1C,eAAiC,SAAjBD,GAA2BC,eAQrD,wCACA,6CAIJ,gCACGC,EAAIvD,KAAI,SAAAC,GAAM,OACb,cAAC,EAAD,CAAYA,OAAQA,GAAaA,EAAO+C,KAD3B,QAMtB,ECxIYkB,EAAa,WACxB,MAKId,qBAAW9E,GAJbG,EADF,EACEA,eACAE,EAFF,EAEEA,UACAD,EAHF,EAGEA,aACAG,EAJF,EAIEA,cAGF,OACE,qCACE,oBAAI1B,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,mDAAf,WACIwB,GACA,qBAAKxB,UAAU,uCAAf,SACE,cAACoE,EAAD,MAIJ,qBAAKpE,UAAU,SAAf,SACE,sBAAKA,UAAU,sBAAf,UAEIwB,EACE,cAAC,EAAD,IACEE,EACF,mBAAG,UAAQ,kBAAX,+CAGEJ,EAAeqB,OAAS,EAC1B,cAAC,EAAD,IAEA,yFAMHpB,GACC,mBAAG,UAAQ,qBAAqBvB,UAAU,kBAA1C,8CAUf,ECxDYgH,EAAe,WAC1B,OACE,oBAAIhH,UAAU,QAAd,2BAEH,ECQYiH,EAAO,WAClB,OACE,cAAC,IAAD,UACE,cAAC,EAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,IAAzB,UACE,cAAC,IAAD,CAAOC,OAAK,EAACD,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,OAAOC,QAAS,cAAC,IAAD,CAAUjH,GAAG,QACzC,eAAC,IAAD,CAAOgH,KAAK,SAAZ,UACE,cAAC,IAAD,CAAOE,OAAK,EAACD,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,EAAD,SAE/B,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,EAAD,cAMpC,ECvBDE,qBAAWC,SAASC,eAAe,SAChCC,OAAO,cAAC,EAAD,I","file":"static/js/main.5fea73c0.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { NavLink, useSearchParams } from 'react-router-dom';\n\nconst getNavLinkClass = ({ isActive }: { isActive: boolean }) => cn(\n  'navbar-item', {\n    'has-background-grey-lighter': isActive,\n  },\n);\n\nexport const Navbar = () => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={getNavLinkClass}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to={{\n              pathname: '/people',\n              search: searchParams.toString(),\n            }}\n            className={getNavLinkClass}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export const Sex = {\n  All: 'All',\n  Male: 'Male',\n  Female: 'Female',\n};\n","import React, { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { Sex } from '../types/Sex';\n\ntype PeopleContextType = {\n  filteredPeople: Person[];\n  errorMessage: string;\n  isLoading: boolean;\n  setPeopleList: React.Dispatch<React.SetStateAction<Person[]>>;\n  isPeopleEmpty: boolean;\n};\n\nexport const PeopleContext = React.createContext<PeopleContextType>({\n  filteredPeople: [] as Person[],\n  errorMessage: '',\n  isLoading: false,\n  setPeopleList: () => {},\n  isPeopleEmpty: false,\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const PeopleProvider: React.FC<Props> = ({ children }) => {\n  const [peopleList, setPeopleList] = useState<Person[]>([]);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isPeopleEmpty, setIsPeopleEmpty] = useState<boolean>(false);\n  const { pathname } = useLocation();\n  const [searchParams] = useSearchParams();\n  const gender = searchParams.get('sex') || Sex.All;\n  const query = searchParams.get('query')?.toLocaleLowerCase() || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  useEffect(() => {\n    if (pathname === '/people') {\n      (async () => {\n        setIsLoading(true);\n        try {\n          const people = await getPeople();\n\n          if (!people.length) {\n            setIsLoading(false);\n            setIsPeopleEmpty(true);\n\n            return;\n          }\n\n          const peopleWithParents = people.map(person => ({\n            ...person,\n            mother: people\n              .find(p => person.motherName === p.name) || null,\n            father: people\n              .find(p => person.fatherName === p.name) || null,\n          }));\n\n          setPeopleList(peopleWithParents);\n        } catch {\n          setErrorMessage('Something went wrong');\n        } finally {\n          setIsLoading(false);\n        }\n      })();\n    }\n  }, [pathname]);\n\n  const getFilteredPeople = () => {\n    let updatedState: Person[] = [];\n\n    switch (gender) {\n      case 'm':\n        updatedState = peopleList.filter(person => person.sex !== 'f');\n        break;\n\n      case 'f':\n        updatedState = peopleList.filter(person => person.sex !== 'm');\n        break;\n\n      default:\n        updatedState = [...peopleList];\n    }\n\n    if (query) {\n      updatedState = updatedState\n        .filter(person => person.name.toLowerCase().includes(query)\n        || person.motherName?.toLowerCase().includes(query)\n        || person.fatherName?.toLowerCase().includes(query));\n    }\n\n    if (centuries.length) {\n      updatedState = updatedState\n        .filter(person => {\n          const personBorn = Math.ceil(person.born / 100).toString();\n\n          return centuries.includes(personBorn);\n        });\n    }\n\n    return updatedState;\n  };\n\n  const filteredPeople = getFilteredPeople();\n\n  const value = {\n    filteredPeople,\n    errorMessage,\n    isLoading,\n    setPeopleList,\n    isPeopleEmpty,\n  };\n\n  return (\n    <PeopleContext.Provider value={value}>\n      {children}\n    </PeopleContext.Provider>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","/* eslint-disable no-console */\nimport React from 'react';\nimport { useSearchParams, Link } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Sex } from '../types/Sex';\n\nconst CENTURIES: number[] = [16, 17, 18, 19, 20];\n\nexport const PeopleFilters = React.memo(() => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const gender = searchParams.get('sex') || Sex.All;\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const getPeopleByGender = (sex: string) => {\n    const params = new URLSearchParams(searchParams);\n\n    switch (sex) {\n      case Sex.Male: {\n        params.set('sex', 'm');\n\n        return params.toString();\n      }\n\n      case Sex.Female:\n        params.set('sex', 'f');\n\n        return params.toString();\n\n      default:\n        params.delete('sex');\n\n        return params.toString();\n    }\n  };\n\n  const getPeopleBySearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const params = new URLSearchParams(searchParams);\n    const searchValue = event.currentTarget.value;\n\n    if (params.has('query') && !searchValue) {\n      params.delete('query');\n      setSearchParams(params);\n\n      return;\n    }\n\n    params.set('query', searchValue);\n    setSearchParams(params);\n  };\n\n  const getPeopleByCenturies = (century?: string) => {\n    const params = new URLSearchParams(searchParams);\n\n    if (!century) {\n      params.delete('centuries');\n\n      return params.toString();\n    }\n\n    const newCenturies = centuries.includes(century)\n      ? centuries.filter(cent => cent !== century)\n      : [...centuries, century];\n\n    params.delete('centuries');\n    newCenturies.forEach(year => {\n      params.append('centuries', year);\n    });\n\n    return params.toString();\n  };\n\n  const resetAllFilters = () => {\n    const params = new URLSearchParams(searchParams);\n\n    params.delete('centuries');\n    params.delete('sex');\n    params.delete('query');\n\n    return params.toString();\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <Link\n          to={{ search: getPeopleByGender(Sex.All) }}\n          className={cn({\n            'is-active': gender === Sex.All,\n          })}\n        >\n          All\n        </Link>\n        <Link\n          to={{ search: getPeopleByGender(Sex.Male) }}\n          className={cn({\n            'is-active': gender === 'm',\n          })}\n        >\n          Male\n        </Link>\n        <Link\n          to={{ search: getPeopleByGender(Sex.Female) }}\n          className={cn({\n            'is-active': gender === 'f',\n          })}\n        >\n          Female\n        </Link>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={getPeopleBySearch}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES.map(century => (\n              <Link\n                key={century}\n                data-cy=\"century\"\n                className={cn('button mr-1', {\n                  'is-info': centuries.includes(century.toString()),\n                })}\n                to={{ search: getPeopleByCenturies(century.toString()) }}\n              >\n                {century}\n              </Link>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <Link\n              data-cy=\"centuryALL\"\n              className={cn('button is-success is-outlined', {\n                'is-hovered': !centuries.length,\n              })}\n              to={{ search: getPeopleByCenturies() }}\n            >\n              All\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <Link\n          className=\"button is-link is-outlined is-fullwidth\"\n          to={{ search: resetAllFilters() }}\n        >\n          Reset all filters\n        </Link>\n      </div>\n    </nav>\n  );\n});\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Link, useParams, useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonCard: React.FC<Props> = ({ person }) => {\n  const { mother, father } = person;\n  const { slug } = useParams();\n  const [searchParams] = useSearchParams();\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={cn({\n        'has-background-warning': slug === person.slug,\n      })}\n    >\n      <td>\n        <Link\n          className={cn({\n            'has-text-danger': person.sex === 'f',\n          })}\n          to={{\n            pathname: `/people/${person.slug}`,\n            search: searchParams.toString(),\n          }}\n        >\n          {person.name}\n        </Link>\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      {mother ? (\n        <td>\n          <Link\n            className=\"has-text-danger\"\n            to={{\n              pathname: `/people/${mother.slug}`,\n              search: searchParams.toString(),\n            }}\n          >\n            {person.motherName}\n          </Link>\n        </td>\n      ) : (\n        <td>{person.motherName || '-'}</td>\n      )}\n\n      {father ? (\n        <td>\n          <Link\n            to={{\n              pathname: `/people/${father.slug}`,\n              search: searchParams.toString(),\n            }}\n          >\n            {person.fatherName}\n          </Link>\n        </td>\n      ) : (\n        <td>{person.fatherName || '-'}</td>\n      )}\n    </tr>\n  );\n};\n","import { useContext } from 'react';\nimport { useSearchParams, Link } from 'react-router-dom';\nimport cn from 'classnames';\nimport { PeopleContext } from '../store/PeopleContext';\nimport { PersonCard } from './Person';\nimport { Person } from '../types';\n\nfunction getSortedList(\n  people: Person[],\n  alphabet: string | null,\n  desc: string | null,\n) {\n  const newPeople = [...people];\n\n  if (alphabet) {\n    const compareFunction = (pers1: Person, pers2: Person) => {\n      if (alphabet === 'name' || alphabet === 'sex') {\n        return pers1[alphabet].localeCompare(pers2[alphabet]);\n      }\n\n      if (alphabet === 'born' || alphabet === 'died') {\n        return pers1[alphabet] - pers2[alphabet];\n      }\n\n      return 0;\n    };\n\n    newPeople.sort(compareFunction);\n  }\n\n  if (desc) {\n    newPeople.reverse();\n  }\n\n  return newPeople;\n}\n\nexport const PeopleTable = () => {\n  const { filteredPeople } = useContext(PeopleContext);\n  const [searchParams] = useSearchParams();\n  const sortAlphabet = searchParams.get('sort');\n  const sortDesc = searchParams.get('order');\n\n  const arr = getSortedList(filteredPeople, sortAlphabet, sortDesc);\n\n  const getSortedPeople = (sort: string) => {\n    const params = new URLSearchParams(searchParams);\n\n    if (sortAlphabet && sortAlphabet !== sort) {\n      params.delete('sort');\n      params.delete('order');\n    } else if (sortAlphabet === sort && sortDesc) {\n      params.delete('sort');\n      params.delete('order');\n    } else {\n      params.set('sort', sort);\n      if (sortAlphabet === sort && !sortDesc) {\n        params.set('order', 'desc');\n      }\n    }\n\n    return params.toString();\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <Link to={{ search: getSortedPeople('name') }}>\n                <span className=\"icon\">\n                  <i className={cn('fas fa-sort', {\n                    'fa-sort-up': sortAlphabet === 'name' && !sortDesc,\n                    'fa-sort-down': sortAlphabet === 'name' && sortDesc,\n                  })}\n                  />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <Link to={{ search: getSortedPeople('sex') }}>\n                <span className=\"icon\">\n                  <i className={cn('fas fa-sort', {\n                    'fa-sort-up': sortAlphabet === 'sex' && !sortDesc,\n                    'fa-sort-down': sortAlphabet === 'sex' && sortDesc,\n                  })}\n                  />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <Link to={{ search: getSortedPeople('born') }}>\n                <span className=\"icon\">\n                  <i className={cn('fas fa-sort', {\n                    'fa-sort-up': sortAlphabet === 'born' && !sortDesc,\n                    'fa-sort-down': sortAlphabet === 'born' && sortDesc,\n                  })}\n                  />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <Link to={{ search: getSortedPeople('died') }}>\n                <span className=\"icon\">\n                  <i className={cn('fas fa-sort', {\n                    'fa-sort-up': sortAlphabet === 'died' && !sortDesc,\n                    'fa-sort-down': sortAlphabet === 'died' && sortDesc,\n                  })}\n                  />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {arr.map(person => (\n          <PersonCard person={person} key={person.slug} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","/* eslint-disable no-nested-ternary */\nimport { useContext } from 'react';\nimport { PeopleContext } from '../store/PeopleContext';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\n\nexport const PeoplePage = () => {\n  const {\n    filteredPeople,\n    isLoading,\n    errorMessage,\n    isPeopleEmpty,\n  } = useContext(PeopleContext);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!isLoading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {\n                isLoading ? (\n                  <Loader />\n                ) : isPeopleEmpty ? (\n                  <p data-cy=\"noPeopleMessage\">\n                    There are no people on the server\n                  </p>\n                ) : filteredPeople.length > 0 ? (\n                  <PeopleTable />\n                ) : (\n                  <p>\n                    There are no people matching the current search criteria\n                  </p>\n                )\n              }\n\n              {errorMessage && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const PageNotFound = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import {\n  Routes,\n  Route,\n  Navigate,\n  HashRouter as Router,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { PeopleProvider } from './store/PeopleContext';\nimport { HomePage } from './components/Homepage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { PageNotFound } from './components/PageNotFound';\n\nexport const Root = () => {\n  return (\n    <Router>\n      <PeopleProvider>\n        <Routes>\n          <Route path=\"/\" element={<App />}>\n            <Route index element={<HomePage />} />\n            <Route path=\"home\" element={<Navigate to=\"/\" />} />\n            <Route path=\"people\">\n              <Route index element={<PeoplePage />} />\n              <Route path=\":slug\" element={<PeoplePage />} />\n            </Route>\n            <Route path=\"*\" element={<PageNotFound />} />\n          </Route>\n        </Routes>\n      </PeopleProvider>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}